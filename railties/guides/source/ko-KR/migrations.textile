h2. 마이그레이션

마이그레이션은 체계적이고 유기적인 수단으로 데이터베이스를 변경할 수 있는 편리한 방법입니다. 여러분은 손수 SQL을 수정할 수 있습니다. 그러나 수정후에 다른 개발자들에게 수정 사항을 알려줘야할 책임을 가지게 될겁니다. 그리고 다음에 제품을 배포 할때도 변경 사항이 실행되는지 이를 지켜봐야만 합니다.

엑티브 레코드는 이미 실행된 마이그레이션을 추적합니다. 그래서 여러분이 해야할 일은 소스를 업데이트 하고 +rake db:migrate+ 명령을 실행하는 일 뿐입니다. 엑티브 레코드는 실행해야 할 마이그레이션만 작업을 진행합니다. 그리고 여러분의 데이터베이스의 구조에 부합하는 +db/schema.rb+ 파일도 갱신합니다.

마이그레이션은 루비를 이용해서 이러한 변경 사항을 기술합니다. 이것의 굉장한 점은, 대부분의 엑티브 레코드의 기능처럼 데이터베이스에 독립적이라는 것 입니다.: +SELECT *+ 의 다양한 변화에 비한다면야, +CREATE TABLE+의 정확한 문법에 대해서 크게 걱정할 필요가 없습니다. (데이터베이스의 특별한 기능들을 위해 기존 SQL도 사용할 수 있습니다.) 예를 들어, 개발에서는 SQLite3 를 사용하지만, 제품에서는 MySQL을 사용할 수 있죠. 

여러분은 다음 내용의 마이그레이션 관한 모든걸 배울 수 있습니다.:

* 제너레이터(generators) 사용하고 만들기
* 엑티브 레코드가 제공하는 데이터베이스 관리 메소드
* 마이그레이션을 관리하는 Rake 태스크
* 마이그레이션과 +schema.rb+ 의 관계

endprologue.

WARNING. 이 가이드의 원본은 영문 버전인 "Rails Database Migrations":http://guides.rubyonrails.org/migrations.html 입니다. 번역 과정에서 원본과 차이가 발생할 수 있습니다. 번역본은 원본의 참고로 생각해 주세요.

h3(#Anatomy-of-a-Migration). 마이그레이션 분석

마이그레이션의 자세한 부분을 다루기 앞서, 여러분이 수행할 수 있는 몇 가지 예제가 있습니다.:

<ruby>
class CreateProducts < ActiveRecord::Migration
  def self.up
    create_table :products do |t|
      t.string :name
      t.text :description

      t.timestamps
    end
  end

  def self.down
    drop_table :products
  end
end
</ruby>

이 마이그레이션은 문자열 컬럼 +name+과 텍스트 컬럼 +description+으로 구성된 +products+ 테이블을 추가합니다. 기본키(primary key) 컬럼 +id+도 역시 추가됩니다. 그렇지만 이에 관련한 세팅은 기본 설정입니다. 엑티브 레코드가 자동으로 생성하는 타임스탬프 컬럼인 +created_at+ 과 +updated_at+도 추가됩니다. 이 마이그레이션은 간단하게 테이블을 삭제하는 것으로 되돌릴 수 있습니다.

마이그레이션은 스키마의 변경에만 그치는게 아닙니다. 마이그레이션을 데이터베이스내의 잘못된 데이터를 고치거나, 새로운 필드를 만드는데도 사용할 수 있습니다.:

<ruby>
class AddReceiveNewsletterToUsers < ActiveRecord::Migration
  def self.up
    change_table :users do |t|
      t.boolean :receive_newsletter, :default => false
    end
    User.update_all ["receive_newsletter = ?", true]
  end

  def self.down
    remove_column :users, :receive_newsletter
  end
end
</ruby>

이 마이그레이션은 +receive_newsletter+ 컬럼을 +user+ 테이블에 추가합니다. 우리는 새로운 사용자에 대해서는 기본 값을 +false+로 하기를 원하지만, 기존 사용자에 대해서도 옵션을 생각해야 합니다. 그래서 User 모델을 기존 사용자들에 대해 해당 플래그를 +true+로 세팅하는데 사용합니다. 

NOTE: 마이그레이션 중에서 모델을 사용하는데 몇가지 "주의사항":#using-models-in-your-migrations 을 참고하세요.

h4(#migrations-are-classes). 마이그레이션은 클래스이다.

마이그레이션은 +up+(필요한 변경 사항을 수행합니다.)과 +down+(변경 사항을 되돌립니다.)을 구현한 <tt>ActiveRecord::Migration</tt>의 서브 클래스 입니다.

엑티브 레코드는 데이터베이스 독립적인 방법으로 일반적인 데이터 정의 태스크를 수행하는 메소드들을 제공합니다. (여러분은 나중에 이에 관해서 자세히 배울 것입니다.):

* +create_table+
* +change_table+
* +drop_table+
* +add_column+
* +change_column+
* +rename_column+
* +remove_column+
* +add_index+
* +remove_index+

만약, 여러분의 데이터베이스에 특화된 일을 수행할 필요가 있다면 (예컨데 "외래키(foreign key)":#active-record-and-referential-integrity 제약사항 만들기), +execute+ 함수로 임의의 SQL을 실행할 수 있습니다. 마이그레이션은 단지 보통 루비 클래스 입니다. 그래서 이런 함수에 대한 제약 사항은 없습니다. 예를 들어, 컬럼을 추가한 후에 이미 존재하는 레코드를 위해서 추가된 컬에 값을 세팅하는 코드를 작성할 수 있습니다. (필요시 여러분의 모델을 사용해야 합니다.)

데이터베이스가 스키마 변경을 위한 트랜젝션을 제공하면(가령 PostgreSQL 혹은 SQLite3), 마이그레이션은 트랜젝셔에 감싸입니다. 만약 이를 지원하지 않으면 (가령 MySQL), 마이그레이션이 실패 했을때 변경이 적용된 부분들이 되돌아가지(roll back) 못할 것입니다. 이 상황에서 변경된 부분을 손수 되돌려야 할 것입니다.

h4(#whats-in-a-name). 이름의 의미

마이그레이션은 각 마이그레이션 클래스당 하나의 파일로 +db/migrate+에 저장됩니다. 파일의 이름은 +YYYYMMDDHHMMSS_create_products.rb+한 형태의 포맷입니다. 이 이름은 UTC 타임스탬프 마이그레이션 식별자와 언더스코어(_ 모양의 글자)로 연결된 마이그레이션의 이름으로 구성됩니다. 마이그레이션 클래스의 이름( CamelCase 버전)은 반드시 파일 이름의 글자 부분과 맞아야합니다. 예를들어서 +20080906120000_create_products.rb+는 반드시 +CreateProducts+을 정의해야 하고, +20080906120001_add_details_to_products.rb+는 반드시 +AddDetailsToProducts+을 정의해야 합니다. 만약 파일의 이름을 변경하려면, 반드시 파일 내부의 클래스의 이름도 <em>변경해야 합니다.</em> 그렇지 않으면, 레일즈는 클래스를 찾지 못해서 에러를 보고 할 것입니다.

레일즈는 내부적으로 오직 마이그레이션의 번호(타임스탬프를 의미)를 마이그레이션 식별에 사용합니다. 레일즈 2.1 이전에 마이그레이션 번호는 1부터 시작해서 마이그레이션이 생성될때 마다 증가하는 값을 취했습니다. 여러명의 개발자들이 함께 개발할때, 이 규칙은 소규모의 충돌 상황에서도 롤백하고 번호를 마이그레이션의 번호를 다시 매기는 상황을 만들었습니다. 레일즈 2.1에서 마이그레이션의 생성 시각을 식별하는데 사용해서 이러한 문제 상황을 대부분 피할 수 있게 했습니다. +config/application.rb+에 다음 라인을 추가시키면 예전 방식의 번호 매기는 방식으로 돌아갈 수 있습니다.

<ruby>
config.active_record.timestamped_migrations = false
</ruby>

타임스탬프와 마이그레이션을 기록하는 조합은 레일즈가 여러 개발자들이 마이그레이션에 관여하면서 생기는 일반적인 상황을 다룰 수 있게 해주었습니다.

예를들어서 앨리스가 마이그레이션 +20080906120000+과 +20080906123000+을 추가하고 밥이 +20080906124500+를 추가시킨 후 이를 실행합니다. 앨리스는 그녀의 마이그레이션에서 변경을 완료하고 점검합니다. 그리고 밥은 자신의 소스에 최근 변경 사항을 내려 받습니다. 레일즈는 앨리스의 두개의 마이그레이션을 아직 실행하지 않았다는걸 알 수있어서, +rake db:migrate+은 이들 마이그레이션을 실행합니다. (더 이후의 타임스템프 값을 가진 밥의 마이그레이션을 실행하는데도 말이죠.) 그리고 이 과정과 비슷하게 마이그레이션 다운(down)시에도 앨리스의 +down+ 메소드를 실행하지 않습니다.

물론, 이는 팀간의 대화를 대체하는건 아닙니다. 예를 들어서, 만약 앨리스의 마이그레이션이 밥의 마이그레이션 실행에 필요한 테이블을 삭제하면, 문제는 확연히 발생합니다.

h4(#changing-migrations). 마이그레이션 변경하기

때로, 마이그레이션을 작성할때 여러분은 실수를 하게 됩니다. 이미 마이그레이션을 실행한 후에는, 단순히 마이그레이션을 수정하고 다시 실행하는 것으로 원하는 변경을 반영할 수는 없습니다.:레일즈는 이미 실행된 마이그레이션이라면, +rake db:migrate+를 수행할때 아무 것도 수행하지 않습니다. 여러분은 반드시 마이그레이션을 되돌(rollback)리고 (예를 들어, +rake db:rollback+를 사용), 마이그레이션을 수정하고 정확한 버전에 대하여 +rake db:migrate+를 실행해야 합니다.

일반적으로 마이그레이션 수정은 좋은 생각이 아닙니다.:여러분은 자신과 동료들을 위해서 추가적인 일을 만들어내고, 만약 제품에 이미 적용된 마이그레이션을 수정하면 골치 아픈 상황을 만들어 낼겁니다. 대신에 필요한 변경을 수행하는 새로운 마이그레이션을 만드세요. 소스 관리 도구에 커밋되지 않은(혹은 좀 더 일반적으로 표현하자면 여러분의 개발 머신 이외에 퍼지지 않은) 새로운 마이그레이션을 수정하는 편이 상대적으로 무해합니다. 이런건 그냥 상식이죠.

h3(#creating-a-migration). 마이그레이션 만들기

h4(#creating-a-model). 모델 만들기

모델과 발판(scaffold) 제너레이터는 새로운 모델을 추가를 위한 적합한 마이그레이션을 만들 것입니다. 이 마이그레이션은 이미 관련된 테이블 생성에 대한 코드를 담고 있을 것입니다. 만약 레일즈에게 여러분이 원하는 컬럼들을 알려주면 이 역시 함께 생성됩니다. 예를들어서 다음과 같이 실행하면

<shell>
rails generate model Product name:string description:text
</shell>

다음과 같은 마이그레이션이 생성됩니다.

<ruby>
class CreateProducts < ActiveRecord::Migration
  def self.up
    create_table :products do |t|
      t.string :name
      t.text :description

      t.timestamps
    end
  end

  def self.down
    drop_table :products
  end
end
</ruby>

여러분이 원하는 컬럼을 얼마든지 name/type 형태로 추가할 수 있습니다. 기본값으로, +t.timestamps+가 추가되어 있습니다.(이 구문으로 생성된 +updated_at+과 +created_at+ 컬럼은 엑티브 레코드에 의해서 자동으로 채워집니다.)

h4(#creating-a-standalone-migration). 독립적인(Standalone) 마이그레이션 만들기

만약 다른 목적으로 (가령, 이미 존재하는 테이블에 컬럼을 추가하는 경우) 마이그레이션을 만들려면, 마이그레이션 제너레이터를 사용할 수 있습니다.

<shell>
rails generate migration AddPartNumberToProducts
</shell>

이 명령은 비어있지만, 정확한 이름을 가진 마이그레이션을 만듭니다.:

<ruby>
class AddPartNumberToProducts < ActiveRecord::Migration
  def self.up
  end

  def self.down
  end
end
</ruby>

만약 마이그레이션 이름이 "AddXXXToYYY" 혹은 "RemoveXXXFromYYY" 이고 이후에 컬럼 이름과 타입을 입력하면 정확한 +add_column+ 과 +remove_column+ 구문이 생성될 것입니다.

<shell>
rails generate migration AddPartNumberToProducts part_number:string
</shell>

이 명령은 다음을 생성하죠.

<ruby>
class AddPartNumberToProducts < ActiveRecord::Migration
  def self.up
    add_column :products, :part_number, :string
  end

  def self.down
    remove_column :products, :part_number
  end
end
</ruby>

비슷하게,

<shell>
rails generate migration RemovePartNumberFromProducts part_number:string
</shell>

다음의 내용을 생성합니다.

<ruby>
class RemovePartNumberFromProducts < ActiveRecord::Migration
  def self.up
    remove_column :products, :part_number
  end

  def self.down
    add_column :products, :part_number, :string
  end
end
</ruby>

이런 마술 같은 컬럼 만들기는 하나만 할 수 있는게 아닙니다. 예를들어서

<shell>
rails generate migration AddDetailsToProducts part_number:string price:decimal
</shell>

명령은 다음을 생성합니다.

<ruby>
class AddDetailsToProducts < ActiveRecord::Migration
  def self.up
    add_column :products, :part_number, :string
    add_column :products, :price, :decimal
  end

  def self.down
    remove_column :products, :price
    remove_column :products, :part_number
  end
end
</ruby>

늘, 시작점이 될만한 것을 만들 수 있습니다. 여기에서 부터 여러분에 입맛에 맞게 추가하고 삭제하면 됩니다.

h3(#writing-a-migration). 마이그레이션 작성하기

이제 제너레이터를 이용해서 여러분의 마이그레이션을 만들어 볼때 입니다!

h4(#creating-a-table). 테이블 만들기

마이그레이션 메소드인 +create_table+은 여러분의 편리한 도구 중 하나입니다. 보통 이렇게 사용합니다.

<ruby>
create_table :products do |t|
  t.string :name
end
</ruby>

이 코드는 +name+이란 이름의 컬럼을 가진 +products+ 테이블을 만듭니다. (그리고 아래의 논의에서 처럼, 암시적인 +id+ 컬럼도 생성합니다.)

이 객체는 테이블에 만들 컬럼 정보를 블록 형태로 실행합니다. 이를 수행하는 방법은 두가지가 있죠.:첫번째 (관습적인) 폼은 다음과 같습니다.

<ruby>
create_table :products do |t|
  t.column :name, :string, :null => false
end
</ruby>

두번째 폼은 "섹시(sexy)" 마이그레이션이라 불리며, 중복된 +column+ 메소드를 날려버린 방법이죠. 대신에 +string+, +integer+ 등의 메소드는 해당 타입의 컬럼을 생성합니다. 이후 파라미터는 동일합니다.

<ruby>
create_table :products do |t|
  t.string :name, :null => false
end
</ruby>

기본적으로, +create_table+은 +id+라는 기본키(primary key)를 생성합니다. +:primary_key+ 옵션을 이용해서 기본키(primary key)의 이름을 변경하거나, 기본키(primary key)를 원하지 않으면, (예를들어 HABTM 조인 테이블 같이요.) +:id => false+ 를 넘기세요. 만약, 데이터베이스에 특화된 옵션을 넘기려면, +:options+에 SQL 조각을 위치 시킬 수 있습니다. 예를 들어서

<ruby>
create_table :products, :options => "ENGINE=BLACKHOLE" do |t|
  t.string :name, :null => false
end
</ruby>

이 코드는 +ENGINE=BLACKHOLE+을 테이블 생성하는 SQL 구문에 추가할 것입니다. (MySQL은 기본 값은 +ENGIN=InnoDB+ 입니다.)

엑티브 레코드가 지원하는 타입은 +:primary_key+, +:string+, +:text+, +:integer+, +:float+, +:decimal+, +:datetime+, +:timestamp+, +:time+, +:date+, +:binary+, +:boolean+ 입니다.

이들은 각 데이터베이스에 적합한 타입으로 짝지어 집니다. 예를들어서 MySQL을 사용할때 +:string+은 +VARCHAR(255)+와 짝지어 집니다. 섹시하지 않은(non-sexy) 문법을 사용하면, 엑티브 레코드가 지원하지 않는 타입의 컬럼도 만들수 있습니다. 예를들어

<ruby>
create_table :products do |t|
  t.column :name, 'polygon', :null => false
end
</ruby>

그렇지만, 아마 이런 코드는 데이터베이스 이식성이 떨어지게 됩겠죠.

h4(#changing-tables). 테이블 변경

+create_table+과 가까운 메소드는 존재하는 테이블을 변경에 사용되는 +change_table+입니다. 이건 +create_table+과 비슷한 모습으로 사용되지만 객체가 실행하는 블록에 더 많은 트릭이 있습니다. 예를들어

<ruby>
change_table :products do |t|
  t.remove :description, :name
  t.string :part_number
  t.index :part_number
  t.rename :upccode, :upc_code
end
</ruby>
이 코드는 +description+과 +name+을 삭제, +part_number+ 컬럼을 만들고 인덱스를 부여합니다. 마지막으로 +upccode+ 컬럼을 +upc_code+로 이름을 변경합니다. 이건 다음의 코드와 동일합니다.

<ruby>
remove_column :products, :description
remove_column :products, :name
add_column :products, :part_number, :string
add_index :products, :part_number
rename_column :products, :upccode, :upc_code
</ruby>

테이블 이름을 반복하지 말고, 수정할 테이블과 관련된 구문을 한곳에 모으세요. 각 변환 코드 역시 줄어듭니다. 예를들어, +remove_column+ 는 +remove+로 그리고 +add_index+는 +index+가 됩니다.

h4(#special-helpers). 특별한 헬퍼

엑티브 레코드는 공통의 기능에 대해 몇가지 간단한 방법을 제공합니다. 가장 자주 쓰이는 예가 +created_at+과 +updated_at+ 컬럼을 함께 추가할때, 이를 메소드로 수행 할 수 있습니다.:

<ruby>
create_table :products do |t|
  t.timestamps
end
</ruby>
이 코드는 방금 언급한 두 컬럼(거기에 +id+컬럼 까지)을 가진 새로운 products 테이블을 만듭니다.

<ruby>
change_table :products do |t|
  t.timestamps
end
</ruby>
이렇게 기존 테이블에 두 컬럼을 추가할 수도 있죠.

+references+로 불리는 다른 헬퍼도 있습니다. (+belongs_to+ 로도 가능합니다.) 가장 간단한 형태로 예를 들어본다면,

<ruby>
create_table :products do |t|
  t.references :category
end
</ruby>

이 코드는 정확한 타입을 가진 +category_id+ 컬럼을 만듭니다. 컬럼의 이름이 아니라 모델의 이름을 넘기는 부분에 주목하세요. 엑티브 레코드는 여러분을 위해 +id+를 이름에 추가합니다. 만약, 여러 형과 +belongs_to+ 관계를 가지고 있다면, +references+에 필요한 컬럼 정보도 추가해야 합니다.:

<ruby>
create_table :products do |t|
  t.references :attachment, :polymorphic => {:default => 'Photo'}
end
</ruby>
이 코드는 +attachment_id+ 컬럼과 문자열이면서 기본값이 'Photo'인  +attachment_type+ 컬럼을 추가할 것입니다.

NOTE: +references+ 헬퍼는 외래키(foreign key) 제약사항을 추가하지는 않습니다. 이를 위해서 +execute+를 이용하거나, "외래키(foreign key) 지원":#active-record-and-referential-integrity 을 추가하는 플러그인을 사용하세요.

엑티브 레코드가 제공하는 헬퍼가 만족스럽지 않으면 +execute+ 함수로 원하는 SQL을 실행하세요.

개별 메소드에 대한 더 자세한 내용과 예제는 API 문서를 참고하세요. 상세한 문서들은 다음과 같습니다. "<tt>ActiveRecord::ConnectionAdapters::SchemaStatements</tt>":http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html (이 문서는 +up+과 +down+ 내에서 사용할수 있는 메소드 정보를 제공합니다.), "<tt>ActiveRecord::ConnectionAdapters::TableDefinition</tt>":http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/TableDefinition.html (이 문서는 +creat_table+을 사용할때 객체가 실행하는 블록내에서 사용할 수 있는 메소드 정보를 제공합니다.), 그리고 "<tt>ActiveRecord::ConnectionAdapters::Table</tt>":http://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/Table.html (이 문서는 +change_table+을 사용할때 객체가 실행하는 블록에서 사용할 수 있는 메소드 정보를 제공합니다.).

h4(#writing-your-down-method). +down+ 메소드 작성하기

마이그레이션의 +down+ 메소드는 +up+ 메소드가 수행한 변경을 되돌립니다. 다른 말로하자면, +up+을 통해서 변경된 데이터베이스 스키마는 +down+을 통해서 되돌려 집니다. 예를들어, 만약 여러분이 +up+ 메소드에서 테이블을 만들었다면, 여러분은 +down+ 메소드에서 이를 제거해야 합니다. 현명하게 +up+ 메소드의 반대 순서로 만드세요. 예를들면

<ruby>
class ExampleMigration < ActiveRecord::Migration

  def self.up
    create_table :products do |t|
      t.references :category
    end
    #add a foreign key
    execute <<-SQL
      ALTER TABLE products
        ADD CONSTRAINT fk_products_categories
        FOREIGN KEY (category_id)
        REFERENCES categories(id)
    SQL

    add_column :users, :home_page_url, :string

    rename_column :users, :email, :email_address
  end

  def self.down
    rename_column :users, :email_address, :email
    remove_column :users, :home_page_url
    execute "ALTER TABLE products DROP FOREIGN KEY fk_products_categories"
    drop_table :products
  end
end
</ruby>

때로, 마이그레이션을 되돌릴수 없게 될 수 있습니다. 가령, 데이터를 삭제하는 경우 말이죠. 이렇게 마이그레이션을 되돌릴 수 없을때는 +down+ 메소드에서 +IrreversibleMigration+을 발생 시키세요. 만약에 다른이가 여러분의 마이그레이션을 되돌리려고 시도하면, 에러 메세지가 불가능 하다는 사실을 안내해 줄 것입니다.

h3(#running-migrations). 마이그레이션 실행하기

레일즈는 마이그레이션 작업을 위한 rake 태스크 조합을 제공합니다. 최초의 마이그레이션은 아마도 여러분이 사용하게될 +db:migrate+와 관련있습니다. 가장 기본적인 동작은 아직 실행되지 않은 모든 마이그레이션의 +up+ 메소드를 실행하는 것 입니다. 만약 마이그레이션이 없더라도, 일을 무사히 마칩니다.

+db:migrate+ 실행하면 데이터베이스 구조에 부합하는 db/schema.rb 파일을 업데이트하는 +db:schema:dump+ 태스크도 실행하는 걸 기억하세요. 

원하는 버전을 지정하면, 엑티브 레코드는 필요한 마이그레이션(up 혹은 down)을 정해진 버전까지만 실행합니다. 버전은 마이그레이션 파일 앞 부분의 숫자 접두어 입니다. 예를 들어서 버전 20080906120000을 실행하려 이렇게 합니다.

<shell>
rake db:migrate VERSION=20080906120000
</shell>

현재 버전보다 더 크면, 20080906120000를 포함해서 해당 버전까지 모든 마이그레이션을 실행합니다.(다른 말로, '마이그레이션 올리기'라고 합니다.) 만약, 마이그레이션 내리기(롤백을 의미)를 수행하면 20080906120000까지 모든 마이그레이션의 +down+ 메소드를 실행하지만 20080906120000을 포함하지는 않습니다.

h4(#rolling-back). 롤백 하기

흔한 테스크는 마지막 마이그레이션을 되돌리는 일 입니다. 예컨데, 실수를 한 후 이를 고치기를 원할때죠. 롤백을 위해 관련된 버전 숫자를 따라가는 것보다 이렇게 하는게 더 쉽죠.

<shell>
rake db:rollback
</shell>

이 명령은 최근 마이그레이션의 +down+을 실행합니다. 만약 여러번의 undo가 필요하면 +STEP+ 파라미터를 이용할 수 있습니다.:

<shell>
rake db:rollback STEP=3
</shell>

이 명령은 최근 마이그레이션 3개의 +down+ 메소드를 실행합니다.

+db:migrate:redo+ 태스크는 롤백을 하고 다시 마이그레이션을 수행하는데 사용하는 단축 명령입니다. 만약 더 많은 버전을 한꺼번에 되돌아가고 싶다면, +db:rollback+ 태스크에서 여러분이 +STEP+ 파라미터를 사용한 것 처럼 사용할 수 있습니다. 예를들면 다음과 같습니다.

<shell>
rake db:migrate:redo STEP=3
</shell>

이 레이크 태스크들은 +db:migrate+와 함께하지 않습니다. 그들은 단순히 여러분이 특정한 버전으로 마이그레이그션을 필요 없을때까지 좀더 편한 방법을 제공할 뿐입니다.

마지막으로, +db:reset+ 태스크는 모든 데이터베이스를 삭제하고 현재의 스키마를 재생성합니다.

NOTE: +db:reset+은 모든 마이그레이션을 실행하는 것과 동일하지는 않습니다. - "schema.rb":#schema-dumping-and-you 을 참고하세요.

h4(#being-specific). Being Specific

If you need to run a specific migration up or down the +db:migrate:up+ and +db:migrate:down+ tasks will do that. Just specify the appropriate version and the corresponding migration will have its +up+ or +down+ method invoked, for example

<shell>
rake db:migrate:up VERSION=20080906120000
</shell>

will run the +up+ method from the 20080906120000 migration. These tasks check whether the migration has already run, so for example +db:migrate:up VERSION=20080906120000+ will do nothing if Active Record believes that 20080906120000 has already been run.

h4. Being Talkative

By default migrations tell you exactly what they're doing and how long it took. A migration creating a table and adding an index might produce output like this

<shell>
20080906170109 CreateProducts: migrating
-- create_table(:products)
   -> 0.0021s
-- add_index(:products, :name)
   -> 0.0026s
20080906170109 CreateProducts: migrated (0.0059s)
</shell>

Several methods are provided that allow you to control all this:

* +suppress_messages+ suppresses any output generated by its block
* +say+ outputs text (the second argument controls whether it is indented or not)
* +say_with_time+ outputs text along with how long it took to run its block. If the block returns an integer it assumes it is the number of rows affected.

For example, this migration

<ruby>
class CreateProducts < ActiveRecord::Migration
  def self.up
    suppress_messages do
      create_table :products do |t|
        t.string :name
        t.text :description
        t.timestamps
      end
    end
    say "Created a table"
    suppress_messages {add_index :products, :name}
    say "and an index!", true
    say_with_time 'Waiting for a while' do
      sleep 10
      250
    end
  end

  def self.down
    drop_table :products
  end
end
</ruby>

generates the following output

<shell>
20080906170109 CreateProducts: migrating
  Created a table
   -> and an index!
  Waiting for a while
   -> 10.0001s
   -> 250 rows
20080906170109 CreateProducts: migrated (10.0097s)
</shell>

If you just want Active Record to shut up then running +rake db:migrate VERBOSE=false+ will suppress any output.

h3(#using-models-in-your-migrations). Using Models in Your Migrations

When creating or updating data in a migration it is often tempting to use one of your models. After all they exist to provide easy access to the underlying data. This can be done but some caution should be observed.

Consider for example a migration that uses the +Product+ model to update a row in the corresponding table. Alice later updates the +Product+ model, adding a new column and a validation on it. Bob comes back from holiday, updates the source and runs outstanding migrations with +rake db:migrate+, including the one that used the +Product+ model. When the migration runs the source is up to date and so the +Product+ model has the validation added by Alice. The database however is still old and so does not have that column and an error ensues because that validation is on a column that does not yet exist.

Frequently I just want to update rows in the database without writing out the SQL by hand: I'm not using anything specific to the model. One pattern for this is to define a copy of the model inside the migration itself, for example:

<ruby>
class AddPartNumberToProducts < ActiveRecord::Migration
  class Product < ActiveRecord::Base
  end

  def self.up
    ...
  end

  def self.down
    ...
  end
end
</ruby>
The migration has its own minimal copy of the +Product+ model and no longer cares about the +Product+ model defined in the application.

h4. Dealing with Changing Models

For performance reasons information about the columns a model has is cached. For example if you add a column to a table and then try and use the corresponding model to insert a new row it may try to use the old column information. You can force Active Record to re-read the column information with the +reset_column_information+ method, for example

<ruby>
class AddPartNumberToProducts < ActiveRecord::Migration
  class Product < ActiveRecord::Base
  end

  def self.up
    add_column :product, :part_number, :string
    Product.reset_column_information
    ...
  end

  def self.down
    ...
  end
end
</ruby>


h3. Schema Dumping and You

h4. What are Schema Files for?

Migrations, mighty as they may be, are not the authoritative source for your database schema. That role falls to either +db/schema.rb+ or an SQL file which Active Record generates by examining the database. They are not designed to be edited, they just represent the current state of the database.

There is no need (and it is error prone) to deploy a new instance of an app by replaying the entire migration history. It is much simpler and faster to just load into the database a description of the current schema.

For example, this is how the test database is created: the current development database is dumped (either to +db/schema.rb+ or +db/development.sql+) and then loaded into the test database.

Schema files are also useful if you want a quick look at what attributes an Active Record object has. This information is not in the model's code and is frequently spread across several migrations but is all summed up in the schema file. The "annotate_models":http://agilewebdevelopment.com/plugins/annotate_models plugin, which automatically adds (and updates) comments at the top of each model summarizing the schema, may also be of interest.

h4. Types of Schema Dumps

There are two ways to dump the schema. This is set in +config/application.rb+ by the +config.active_record.schema_format+ setting, which may be either +:sql+ or +:ruby+.

If +:ruby+ is selected then the schema is stored in +db/schema.rb+. If you look at this file you'll find that it looks an awful lot like one very big migration:

<ruby>
ActiveRecord::Schema.define(:version => 20080906171750) do
  create_table "authors", :force => true do |t|
    t.string   "name"
    t.datetime "created_at"
    t.datetime "updated_at"
  end

  create_table "products", :force => true do |t|
    t.string   "name"
    t.text     "description"
    t.datetime "created_at"
    t.datetime "updated_at"
    t.string   "part_number"
  end
end
</ruby>

In many ways this is exactly what it is. This file is created by inspecting the database and expressing its structure using +create_table+, +add_index+, and so on. Because this is database independent it could be loaded into any database that Active Record supports. This could be very useful if you were to distribute an application that is able to run against multiple databases.

There is however a trade-off: +db/schema.rb+ cannot express database specific items such as foreign key constraints, triggers or stored procedures. While in a migration you can execute custom SQL statements, the schema dumper cannot reconstitute those statements from the database. If you are using features like this then you should set the schema format to +:sql+.

Instead of using Active Record's schema dumper the database's structure will be dumped using a tool specific to that database (via the +db:structure:dump+ Rake task) into +db/#{Rails.env}_structure.sql+. For example for PostgreSQL the +pg_dump+ utility is used and for MySQL this file will contain the output of +SHOW CREATE TABLE+ for the various tables. Loading this schema is simply a question of executing the SQL statements contained inside.

By definition this will be a perfect copy of the database's structure but this will usually prevent loading the schema into a database other than the one used to create it.

h4. Schema Dumps and Source Control

Because schema dumps are the authoritative source for your database schema, it is strongly recommended that you check them into source control.

h3(#active-record-and-referential-integrity).. Active Record and Referential Integrity

The Active Record way claims that intelligence belongs in your models, not in the database. As such, features such as triggers or foreign key constraints, which push some of that intelligence back into the database, are not heavily used.

Validations such as +validates :foreign_key, :uniqueness => true+ are one way in which models can enforce data integrity. The +:dependent+ option on associations allows models to automatically destroy child objects when the parent is destroyed. Like anything which operates at the application level these cannot guarantee referential integrity and so some people augment them with foreign key constraints.

Although Active Record does not provide any tools for working directly with such features, the +execute+ method can be used to execute arbitrary SQL. There are also a number of plugins such as "foreign_key_migrations":http://github.com/harukizaemon/redhillonrails/tree/master/foreign_key_migrations/ which add foreign key support to Active Record (including support for dumping foreign keys in +db/schema.rb+).

h3. Changelog

* July 15, 2010: minor typos corrected by "Jaime Iniesta":http://jaimeiniesta.com
* September 14, 2008: initial version by "Frederick Cheung":credits.html#fcheung
