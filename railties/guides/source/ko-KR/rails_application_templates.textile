h2. 레일즈 어플리케이션 템플릿

어플리케이션 템플릿은 새 레일즈 프로젝트(또는 이미 생성된 레인즈 프로젝트)에 plugin/gems/initializer 등을 추가하기 위한 DSL 을 포함한 간단한 루비 파일들입니다.

이 가이드를 통해서 다음과 같은 것을 익힐 수 있습니다.

* 레일즈 어플리케이션을 생성/커스터마이즈 하기 위한 템플릿을 사용할 수 있습니다.
* 레일즈 템플릿 API 를 이용하여 당신만의 재사용 가능한 어플리케이션 템플릿을 작성할 수 있습니다.

endprologue.

h3. 사용법

템플릿을 적용하기 위해, -m 옵션을 이용하여 적용할 템플릿의 위치를 레일즈 제너레이터에 알려줄 필요가 있습니다.

<shell>
$ rails new blog -m ~/template.rb
</shell>

URL 을 이용한 템플릿 적용도 가능합니다.

<shell>
$ rails new blog -m https://gist.github.com/755496.txt
</shell>

이미 생성된 레일즈 어플리케이션의 경우, +rails:template+ rake task 를 이용할 수 있습니다.

<shell>
$ rake rails:template LOCATION=~/template.rb
</shell>

h3. 템플릿 API

레일즈 템플릿 API 는 매우 직관적이고 이해하기 쉽습니다. 일반적인 레일즈 템플릿의 예는 다음과 같습니다.

<ruby>
# template.rb
run "rm public/index.html"
generate(:scaffold, "person name:string")
route "root :to => 'people#index'"
rake("db:migrate")

git :init
git :add => "."
git :commit => "-a -m 'Initial commit'"
</ruby>

다음 섹션들에서는 API 에서 제공하는 주요 메소드들을 설명합니다.

h4. gem(name, options = {})

생성된 어플리케이션의 +Gemfile+ 에 +gem+ 항목을 추가합니다.

만약 어플리케이션이 +bj+ 와 +nokogiri+ gem 에 의존적이라면 아래와 같이 사용합니다.

<ruby>
gem "bj"
gem "nokogiri"
</ruby>

Please note that this will NOT install the gems for you. So you may want to run the +rake gems:install+ task too :

<ruby>
rake "gems:install"
</ruby>

And let Rails take care of installing the required gems if they’re not already installed.

h4. add_source(source, options = {})

생성된 어플리케이션의 +Gemfile+ 에 주어진 source 를 추가합니다.

For example, if you need to source a gem from "http://code.whytheluckystiff.net":

<ruby>
add_source "http://code.whytheluckystiff.net"
</ruby>

h4. plugin(name, options = {})

생성된 어플리케이션에 플러그인을 설치합니다.

Git 으로부터 플러그인을 설치합니다.

<ruby>
plugin 'authentication', :git => 'git://github.com/foor/bar.git'
</ruby>

git 서브모듈을 통해 플러그인을 설치하는 것도 가능합니다.

<ruby>
plugin 'authentication', :git => 'git://github.com/foor/bar.git',
                         :submodule => true
</ruby>

Please note that you need to +git :init+ before you can install a plugin as a submodule.

Or use plain old SVN :

<ruby>
plugin 'usingsvn', :svn => 'svn://example.com/usingsvn/trunk'
</ruby>

h4. vendor/lib/file/initializer(filename, data = nil, &block)

+config/initializer+ 디렉토리에 initializer 를 추가합니다.

Lets say you like using +Object#not_nil?+ and +Object#not_blank?+ :

<ruby>
initializer 'bloatlol.rb', <<-CODE
class Object
  def not_nil?
    !nil?
  end

  def not_blank?
    !blank?
  end
end
CODE
</ruby>

Similarly +lib()+ creates a file in the +lib/+ directory and +vendor()+ creates a file in the +vendor/+ directory.

There is even +file()+, which accepts a relative path from +Rails.root+ and creates all the directories/file needed :

<ruby>
file 'app/components/foo.rb', <<-CODE
class Foo
end
CODE
</ruby>

That’ll create +app/components+ directory and put +foo.rb+ in there.

h4. rakefile(filename, data = nil, &block)

Creates a new rake file under +lib/tasks+ with the supplied tasks :

<ruby>
rakefile("bootstrap.rake") do
  <<-TASK
    namespace :boot do
      task :strap do
        puts "i like boots!"
      end
    end
  TASK
end
</ruby>

The above creates +lib/tasks/bootstrap.rake+ with a +boot:strap+ rake task.

h4. generate(what, args)

Runs the supplied rails generator with given arguments. For example, I love to scaffold some whenever I’m playing with Rails :

<ruby>
generate(:scaffold, "person", "name:string", "address:text", "age:number")
</ruby>

h4. run(command)

Executes an arbitrary command. Just like the backticks. Let's say you want to remove the +public/index.html+ file :

<ruby>
run "rm public/index.html"
</ruby>

h4. rake(command, options = {})

Runs the supplied rake tasks in the Rails application. Let's say you want to migrate the database :

<ruby>
rake "db:migrate"
</ruby>

You can also run rake tasks with a different Rails environment :

<ruby>
rake "db:migrate", :env => 'production'
</ruby>

Or even use sudo :

<ruby>
rake "gems:install", :sudo => true
</ruby>

h4. route(routing_code)

This adds a routing entry to the +config/routes.rb+ file. In above steps, we generated a person scaffold and also removed +public/index.html+. Now to make +PeopleController#index+ as the default page for the application :

<ruby>
route "root :to => 'person#index'"
</ruby>

h4. inside(dir)

Enables you to run a command from the given directory. For example, if you have a copy of edge rails that you wish to symlink from your new apps, you can do this:

<ruby>
inside('vendor') do
  run "ln -s ~/commit-rails/rails rails"
end
</ruby>

h4. ask(question)

+ask()+ gives you a chance to get some feedback from the user and use it in your templates. Lets say you want your user to name the new shiny library you’re adding :

<ruby>
lib_name = ask("What do you want to call the shiny library ?")
lib_name << ".rb" unless lib_name.index(".rb")

lib lib_name, <<-CODE
class Shiny
end
CODE
</ruby>

h4. yes?(question) or no?(question)

These methods let you ask questions from templates and decide the flow based on the user’s answer. Lets say you want to freeze rails only if the user want to :

<ruby>
rake("rails:freeze:gems") if yes?("Freeze rails gems ?")
no?(question) acts just the opposite.
</ruby>

h4. git(:must => "-a love")

Rails templates let you run any git command :

<ruby>
git :init
git :add => "."
git :commit => "-a -m 'Initial commit'"
</ruby>

h3. Changelog

* April 29, 2009: Initial version by "Pratik":credits.html#lifo
